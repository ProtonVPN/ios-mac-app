# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

$derived_data_path = "DerivedData"
$keychain_name = ENV["CI_KEYCHAIN_NAME"]

# Prevents timeouts during builds. More info: https://github.com/fastlane/fastlane/issues/10131
ENV["FASTLANE_XCODEBUILD_SETTINGS_TIMEOUT"] = "180"
ENV["FASTLANE_XCODE_LIST_TIMEOUT"] = "180"

desc "Run all Core iOS tests"
lane :ios_core_test do
  simulator_name = ENV["CI_JOB_ID"]
  scan(scheme: "vpncore-ios",
    result_bundle: true,
    derived_data_path: $derived_data_path,
    skip_slack: true,
    devices: [simulator_name],
    clean: true)
end

desc "Run all Core macOS tests"
lane :macos_core_test do  
  scan(scheme: "vpncore-macos", 
    result_bundle: true,
    derived_data_path: $derived_data_path,
    skip_slack: true,
    clean: true)
end

desc "Run all iOS app unit tests"
lane :ios_app_unit_test_all do
  runIOSTests(
    testplan: "ProtonVPN-iOS-Unit-All"
  )
end

desc "Run all iOS app UI tests"
lane :ios_app_ui_test_all do
    runIOSTests(
      testplan: "ProtonVPN-iOS-UI-Smoke"
    )
end

desc "Run only smoke iOS app UI tests"
lane :ios_app_ui_test_smoke do
    runIOSTests(
      testplan: "ProtonVPN-iOS-UI-Smoke"
    )
end

desc "Run all macOS app unit tests"
lane :macos_app_unit_test_all do 
  runMacOSTests(
    testplan: "ProtonVPN-macOS-Unit-All"
  )
end

desc "Run all macOS app UI tests"
lane :macos_app_ui_test_all do
  runMacOSTests(
    testplan: "ProtonVPN-macOS-UI-All"
  )
end

desc "Run only smoke macOS app UI tests"
lane :macos_app_ui_test_smoke do
  runMacOSTests(
    testplan: "ProtonVPN-macOS-UI-Smoke"
  )
end

desc "Run BugReport on iOS UI tests"
lane :ios_bugreport_ui_test do
    simulator_name = ENV["CI_JOB_ID"]
    scan(
      scheme: "BugReportSampleiOSApp",
      derived_data_path: $derived_data_path,
      clean: true,
      result_bundle: true,
      skip_slack: true,
      devices: [simulator_name]
    )
end

desc "Run BugReport on mac UI tests"
lane :macos_bugreport_ui_test do
    scan(
      scheme: "BugReportSampleMacOSApp",
      derived_data_path: $derived_data_path,
      clean: true,
      result_bundle: true,
      skip_slack: true
    )
end

lane :create_macos_keychain do
  create_keychain(
    name: $keychain_name,
    password: ENV["DEVELOPER_KEYCHAIN_PASSWORD"],
    default_keychain: false,
    add_to_search_list: true,
    unlock: true,
    require_create: false
  )
  import_certificate(
    keychain_name: $keychain_name,
    keychain_password: ENV["DEVELOPER_KEYCHAIN_PASSWORD"],
    certificate_path: 'Certificates.p12',
    certificate_password: ENV["DEVELOPER_CERTIFICATE_PASSWORD"]
  )
end

lane :delete_macos_keychain do
  delete_keychain(
    name: $keychain_name
  )
end

lane :create_ios_keychain do
  create_keychain(
      name: $keychain_name,
      password: ENV["DEVELOPER_KEYCHAIN_PASSWORD"],
      default_keychain: false,
      add_to_search_list: true,
      unlock: true,
      lock_when_sleeps: false,
      lock_after_timeout: false
  )
  import_certificate(
      keychain_name: $keychain_name,
      keychain_password: ENV["DEVELOPER_KEYCHAIN_PASSWORD"],
      certificate_path: 'Certificates.p12',
      certificate_password: ENV["DISTRIBUTION_CERTIFICATE_PASSWORD"]
  )
end

lane :delete_ios_keychain do
  delete_keychain(
      name: $keychain_name
  )
end

desc "Run Onboarding module tests"
lane :onboarding_test do
    simulator_name = ENV["CI_JOB_ID"]
    scan(
      scheme: "OnboardingSampleApp",
      derived_data_path: $derived_data_path,
      clean: true,
      result_bundle: true,
      skip_slack: true,
      devices: [simulator_name]
    )
end

desc "Run iOS Modals module tests"
lane :modals_ios_test do
    simulator_name = ENV["CI_JOB_ID"]
    scan(
      scheme: "ModalsSampleApp",
      derived_data_path: $derived_data_path,
      clean: true,
      result_bundle: true,
      skip_slack: true,
      devices: [simulator_name]
    )
end

desc "Run macOS Modals module tests"
lane :modals_macos_test do
    simulator_name = ENV["CI_JOB_ID"]
    scan(
      scheme: "ModalsSampleMacOSApp",
      derived_data_path: $derived_data_path,
      clean: true,
      result_bundle: true,
      skip_slack: true
    )
end

desc "Run Search module unit tests"
lane :ios_search_test do
  simulator_name = ENV["CI_JOB_ID"]
  scan(scheme: "Search",    
    result_bundle: true,
    derived_data_path: $derived_data_path,
    skip_slack: true,
    code_coverage: true,
    devices: [simulator_name],
    clean: true)
end

desc "Run WireGuard NetworkExtension tests"
lane :wireguard_networkextension_tests do
    simulator_name = ENV["CI_JOB_ID"]
    scan(
      scheme: "WireGuardNetworkExtensionTests",
      derived_data_path: $derived_data_path,
      clean: true,
      result_bundle: true,
      skip_slack: true,
      devices: [simulator_name]
    )
end

desc "Run Modals module unit tests"
lane :ios_modals_test do
  simulator_name = ENV["CI_JOB_ID"]
  scan(scheme: "Modals",    
    result_bundle: true,
    derived_data_path: $derived_data_path,
    skip_slack: true,
    devices: [simulator_name],
    clean: true)
end

lane :ios_internal_beta do |options|
  if !options[:changelog]
      abort("Please provide a changelog by appending`changelog:\"<Log notes>\"` to running this lane")
  end

  if !options[:scheme]
    SCHEME = "ProtonVPN-iOS"
    BUNDLE_ID = "ch.protonmail.vpn"
  else
    SCHEME = options[:scheme]
    BUNDLE_ID = "ch.protonmail.vpn.debug" # Refactor this if more app versions are added
  end
  
  clear_derived_data

  increment_build_number(
    build_number: ENV["NEW_BUILD_NUMBER"],
    xcodeproj: "./apps/ios/iOS.xcodeproj"
  )
  # Prepare API key for contacting Apple APIs
  get_app_store_api_key

  # Release build
  build_app(
      scheme: SCHEME,
      clean: true,
      output_directory: "build/" + SCHEME + "/",
      export_method: "app-store",
      export_options: {
          provisioningProfiles: {
              "ch.protonmail.vpn" => "ProtonVPN Release",
              "ch.protonmail.vpn.OpenVPN-Extension" => "ProtonVPN OpenVPN Release",
              "ch.protonmail.vpn.widget" => "ProtonVPN Widget Release",
              "ch.protonmail.vpn.Siri-Shortuct-Handler" => "ProtonVPN Siri Shortcuts Release",
              "ch.protonmail.vpn.WireGuardiOS-Extension" => "ProtonVPN Wireguard extension Release"
          }
      }
  )

  # Updload dSYMs to Sentry
  # Uncomment when sentry starts working... if ever
  #appVersion = get_version_number(xcodeproj: "./apps/ios/iOS.xcodeproj", target: "ProtonVPN")
  #appBuild = get_build_number(xcodeproj: "./apps/ios/iOS.xcodeproj")
  
  # Uncomment when sentry starts working... if ever
  #sentry_create_release(
  #  app_identifier: BUNDLE_ID,
  #  build: appBuild,
  #  version: appVersion
  #)
  
  # Uncomment when sentry starts working... if ever
  #  sentry_set_commits(
  #    app_identifier: BUNDLE_ID,
  #    build: appBuild,
  #    version: appVersion
  #  )

  # Uncomment when sentry starts working... if ever
  #sentry_create_deploy(
  #  app_identifier: BUNDLE_ID,
  #  version: appVersion,
  #  build: appBuild,
  #  env: 'testflight'
  #)
  #sentry_upload_dsym
  
  
  upload_to_testflight(
    app_identifier: BUNDLE_ID,
    team_name: "Proton AG",
    groups: ["Internal Members"],
    changelog: options[:changelog],
    distribute_external: true,
    demo_account_required: true
  )

end

lane :mac_update_build_numbers do
  increment_build_number(
    build_number: ENV["BUILD_NUMBER"],
    xcodeproj: "./apps/macos/macOS.xcodeproj"
  )

end

def self.runIOSTests(params)
  simulator_name = ENV["CI_JOB_ID"]
  scan(
    scheme: "ProtonVPN-iOS",
    derived_data_path: $derived_data_path,
    clean: true,
    result_bundle: true,
    skip_slack: true,
    devices: [simulator_name],
    testplan: params[:testplan]
  )
end

def self.runMacOSTests(params)
  scan(
    scheme: "ProtonVPN-macOS",
    clean: true,
    derived_data_path: $derived_data_path,
    result_bundle: true,
    skip_slack: true,
    number_of_retries: 1,
    testplan: params[:testplan]
  )  
end

def get_app_store_api_key
  app_store_connect_api_key(
    key_id: ENV["APPSTORE_API_KEY_ID"],
    issuer_id: ENV["APPSTORE_API_KEY_ISSUER"],
    key_content: ENV["APPSTORE_API_KEY"],
    duration: 1200,
    in_house: false
  )
end
