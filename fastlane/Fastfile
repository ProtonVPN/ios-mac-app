# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

$derived_data_path = "DerivedData"

desc "Run all Core iOS tests"
lane :ios_core_test do
  simulator_name = ENV["CI_PIPELINE_ID"]
  scan(scheme: "vpncore-ios", 
    result_bundle: true,
    derived_data_path: $derived_data_path,
    skip_slack: true,
    devices: [simulator_name],
    clean: true)
end

desc "Run all Core macOS tests"
lane :macos_core_test do  
  scan(scheme: "vpncore-macos", 
    result_bundle: true,
    derived_data_path: $derived_data_path,
    skip_slack: true,
    clean: true)
end

desc "Run all iOS app tests"
lane :ios_app_test do
    simulator_name = ENV["CI_PIPELINE_ID"]
    scan(
      scheme: "ProtonVPN-iOS",
      derived_data_path: $derived_data_path,
      clean: true,
      result_bundle: true,
      skip_slack: true,
      devices: [simulator_name]
    )
end

desc "Run all Core macOS tests"
lane :macos_app_test do 
  scan(
      scheme: "ProtonVPN-macOS",
      clean: true,
      derived_data_path: $derived_data_path,
      result_bundle: true,
      skip_slack: true,
      number_of_retries: 1
  )  
end

lane :create_macos_keychain do
  keychain_name = ENV["CI_PIPELINE_ID"]
  create_keychain(
    name: keychain_name,
    password: ENV["DEVELOPER_KEYCHAIN_PASSWORD"],
    default_keychain: false,
    add_to_search_list: true,
    unlock: true
  )
  import_certificate(
    keychain_name: keychain_name,
    keychain_password: ENV["DEVELOPER_KEYCHAIN_PASSWORD"],
    certificate_path: 'Certificates.p12',
    certificate_password: ENV["DEVELOPER_CERTIFICATE_PASSWORD"]
  )
end

lane :delete_macos_keychain do
  keychain_name = ENV["CI_PIPELINE_ID"]
  delete_keychain(
    name: keychain_name
  )
end

lane :create_ios_keychain do
  keychain_name = ENV["CI_PIPELINE_ID"]
  create_keychain(
      name: keychain_name,
      password: ENV["DEVELOPER_KEYCHAIN_PASSWORD"],
      default_keychain: false,
      add_to_search_list: true,
      unlock: true
  )
  import_certificate(
      keychain_name: keychain_name,
      keychain_password: ENV["DEVELOPER_KEYCHAIN_PASSWORD"],
      certificate_path: 'Certificates.p12',
      certificate_password: ENV["DISTRIBUTION_CERTIFICATE_PASSWORD"]
  )
end

lane :delete_ios_keychain do
  delete_keychain(
      name: ENV["CI_PIPELINE_ID"]
  )
end

lane :ios_internal_beta do |options|
  if !options[:changelog]
      abort("Please provide a changelog by appending`changelog:\"<Log notes>\"` to running this lane")
  end

  if !options[:scheme]
    SCHEME = "ProtonVPN-iOS"
  else
    SCHEME = options[:scheme]
  end
  
  clear_derived_data

  increment_build_number(
    build_number: ENV["NEW_BUILD_NUMBER"],
    xcodeproj: "./apps/ios/iOS.xcodeproj"
  )

  # Release build
  build_app(
      scheme: SCHEME,
      clean: true,
      output_directory: "build/",
      export_method: "app-store",
      export_options: {
          provisioningProfiles: {
              "ch.protonmail.vpn" => "ProtonVPN Release",
              "ch.protonmail.vpn.OpenVPN-Extension" => "ProtonVPN OpenVPN Release",
              "ch.protonmail.vpn.widget" => "ProtonVPN Widget Release",
              "ch.protonmail.vpn.Siri-Shortuct-Handler" => "ProtonVPN Siri Shortcuts Release"
          }
      }
  )
  upload_to_testflight(
      team_name: "Proton Technologies AG",
      groups: ["Internal Members"],
      changelog: options[:changelog],
      distribute_external: true,
      demo_account_required: true
  )

  # Updload dSYMs to Sentry
  sentry_upload_dsym

end
