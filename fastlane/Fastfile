# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#
# Environment variables used:
# CI_KEYCHAIN_NAME - name of the keychain to use in scripts
# CI_COMMIT_SHORT_SHA - current commit short sha (automatically set by Gitlab CI)
# DERIVED_DATA_TTL - How much time DerivedData folder is cached (also see $derived_data_ttl below)
# 

$keychain_name = ENV["CI_KEYCHAIN_NAME"]
$derived_data_path_old = "DerivedData"

# Prevents timeouts during builds. More info: https://github.com/fastlane/fastlane/issues/10131
ENV["FASTLANE_XCODEBUILD_SETTINGS_TIMEOUT"] = "180"
ENV["FASTLANE_XCODE_LIST_TIMEOUT"] = "180"

# -------------------------- Updated lanes (late 2023): --------------------------

## Set variables used throughout the file

# Get short commit sha from gitlab CI or from git directly. Gitlab uses first 8 characters, so we also set --short=8
$commit_sha = ENV["CI_COMMIT_SHORT_SHA"] || `git rev-parse --short=8 HEAD`.strip

# Derived data and other build artifacts are stored in a place where other jobs can (re)use it
$build_root_parent_path = `echo $HOME`.strip + "/build/"
$build_root_path = $build_root_parent_path + $commit_sha
$build_path = $build_root_path + "/Build/"
$buildlog_path = $build_root_path + "/BuildLog/"
# Shared Derived data folder is used in cases where its results may be reused, i.e. when building
# the app or building xctestrun for later usage.
$derived_data_path_shared = $build_root_path + "/DerivedData/"
# Temporary DerivedData is used in jobs that don't need it to be cached for usage in the future
# for example when running pre-build tests (from xctestrun).
$derived_data_path_temporary = "DerivedData_Temporary/"


# After this amount of time DerivedData folder will be deleted.
# More info about possible values can be found in `man find` `-atime` part.
$derived_data_ttl = ENV["DERIVED_DATA_TTL"] || "72h" # 72 = 24 * 3 days

# Build paths
$output_folder = ENV["JOBS_OUTPUT_PATH"] || "build/"
$output_folder_macos = $output_folder + "macos/"
$output_folder_ios = $output_folder + "ios/"

$fastlane_output_folder = "output_directory/"

# Signing
$team_id_ios = "2SB5Z68H26"

# GIT settings for storing certificates and PPs
$match_git_branch_ios = "ios/vpn"
$match_keychain_name = "fastlane.keychain" # Fastlane match will save secure stuff here
# env['MATCH_GIT_URL'] must be set on the server to a repo where PPs are saved

# App identifiers
$APP_ID_IOS_APP = "ch.protonmail.vpn"
$APP_ID_IOS_OVPN = "ch.protonmail.vpn.OpenVPN-Extension"
$APP_ID_IOS_WG = "ch.protonmail.vpn.WireGuardiOS-Extension"
$APP_ID_IOS_WIDGET = "ch.protonmail.vpn.widget"
$APP_ID_IOS_SIRI = "ch.protonmail.vpn.Siri-Shortcut-Handler"

# When lane is run from gitlab CI, script creates a separate simulator for each run, to make 
# it possible to run several test jobs at the same time. If running lane locally, default
# will be used. Please update to newer device simulator as time goes.
$ios_test_device = ENV["CI_JOB_ID"] || "iPhone 14"

## Lanes

desc "Build mac app (debug)"
lane :mac_build_debug do

    # Delete old DerivedData folders
    cleanup_derived_data

    configuration = "Debug"
    scheme = "ProtonVPN-macOS"
    export_method = "mac-application"

    build_mac_app(
      build_path: $build_path,
      derived_data_path: $derived_data_path_shared,
      buildlog_path: $buildlog_path,
      configuration: configuration,
      scheme: scheme,
      clean: false, # No need for a clean: we create new DerivedData folder for each commit
      output_directory: $output_folder_macos + configuration + "/",
      export_method: export_method,
      disable_package_automatic_updates: true,
      skip_codesigning: true
    )
end

desc "Prepare certificates and provisioning profiles for ios app (debug)"
lane:ios_prepare_certificates_develop do
    # Separate keychain is created if needed
    match_keychain_create

    # Prepare API key for contacting Apple APIs
    get_app_store_api_key

    # Download current certs and PPs from git or crate them on appstore portal
    # and save to git repo (env['MATCH_GIT_URL']) for later use.
    match(
          type: "development",
          team_id: $team_id_ios,
          git_branch: $match_git_branch_ios,
          keychain_name: $match_keychain_name,
          app_identifier: [
              $APP_ID_IOS_APP,
              $APP_ID_IOS_OVPN,
              $APP_ID_IOS_WG,
              $APP_ID_IOS_WIDGET,
              $APP_ID_IOS_SIRI
          ],
    )
end

desc "Build ios app (debug)"
lane :ios_build_debug do

    begin

        # Delete old DerivedData folders
        cleanup_derived_data

        # Download develop certificats and PPs from a special repo or recreate them on apple dev portal
        ios_prepare_certificates_develop

        # Setup for debug build
        configuration = "Debug"
        scheme = "ProtonVPN-iOS"
        export_method = "development"

        # Update project settings to use manual PPs
        $ppPrefix = "match " + export_method.capitalize + " "
        provisioningProfilesByName = {
            'ProtonVPN' => $ppPrefix + $APP_ID_IOS_APP,
            'OpenVPN Extension' => $ppPrefix + $APP_ID_IOS_OVPN,
            'WireGuardiOS Extension' => $ppPrefix + $APP_ID_IOS_WG,
            'Quick Connect Widget' => $ppPrefix + $APP_ID_IOS_WIDGET,
            'Siri Shortcut Handler' => $ppPrefix + $APP_ID_IOS_SIRI,
        }
        provisioningProfilesByName.each do |target_identifier, target_pp|
            update_code_signing_settings(
                path: "apps/ios/iOS.xcodeproj",
                targets: target_identifier,
                profile_name: target_pp,
                use_automatic_signing: false,
                build_configurations: configuration
            )
        end

        # Finally build the app
        build_ios_app(
          build_path: $build_path,
          derived_data_path: $derived_data_path_shared,
          buildlog_path: $buildlog_path,
          xcargs: arguments[:xcargs] + "-skipPackagePluginValidation",
          configuration: configuration,
          scheme: scheme,
          clean: false, # No need for a clean: we create new DerivedData folder for each commit
          output_directory: $output_folder_ios + configuration + "/",
          export_method: export_method,
          export_team_id: $team_id_ios,
        )
    ensure

        # Delete the keychain to not leave the signing scertificate
        match_keychain_delete

        # Copy build logs into folder being uploaded into artfacts
        copyLogsIntoArtifacts
    end
end

# Delete DerivedData folders older than `$derived_data_ttl` ago
def cleanup_derived_data
    cmd_find = "find #{$build_root_parent_path}* -type d -maxdepth 0 -ctime +#{$derived_data_ttl}"
    cmd_delete = "xargs rm -rf"
    puts "Will delete old derived data:" 
    puts `#{cmd_find}`
    puts `#{cmd_find} | #{cmd_delete}`
end

# Create a keychain that will be used for signing
def match_keychain_create
  create_keychain(
      name: $match_keychain_name,
      password: ENV["MATCH_KEYCHAIN_PASSWORD"],
      default_keychain: false,
      add_to_search_list: true,
      unlock: true,
      lock_when_sleeps: false,
      lock_after_timeout: false,
      timeout: 1800
  )
end

# Delete keychain created in `match_keychain_create`
def match_keychain_delete
      delete_keychain(
        name: $match_keychain_name
      )
end

# Move build logs into a folder that will be uploaded as artifact
def copyLogsIntoArtifacts
    # Adding "../" to the output folder, because otherwise its root is `fastlane/` folder
    FileUtils.cp_r $buildlog_path, "../" + $output_folder
end

# ---------- Pre-build xctestrun files ---------

desc "Build tests (unit and ui)."
desc "Results are saved into $output_folder_X and then can be used by `run_tests` lane."
desc ""
desc ""
desc "Options available:"
desc "ios:true, macos:true - one of these should be used to select which OS we are interested in."
desc ""
desc ""
desc "Usage: `fastlane build_tests ios:true` or `fastlane build_tests macos:true` to build app tests"
lane :build_tests do |options|

    # Delete old DerivedData folders
    cleanup_derived_data

    derived_data = $derived_data_path_shared
    puts "DerivedData folder: " + derived_data

    # Magic destination values, that build for all platforms are `generic/platform=iOS Simulator` and `generic/platform=macOS`.
    # A little more info about destinations can be found here: https://mokacoding.com/blog/xcodebuild-destination-options/

    if options[:ios]
      destination_for_xcbuild = "generic/platform=iOS Simulator"
      output_folder_path = $output_folder_ios
      scheme = "ProtonVPN-iOS"

    elsif options[:macos]
      destination_for_xcbuild = "generic/platform=macOS"
      output_folder_path = $output_folder_macos
      scheme = "ProtonVPN-macOS"
      
    end

    run_tests(
      build_for_testing: true,
      scheme: scheme,
      derived_data_path: derived_data,
      destination: destination_for_xcbuild,
      clean: false,
      should_zip_build_products: true,
      output_directory: $fastlane_output_folder,
    )

    # Copy generated zip file into artifacts folder
    FileUtils.mkdir_p "../" + output_folder_path
    output_file = build_products_file("../" + output_folder_path, scheme)
    puts "Moving Build Products zip to: " + output_file
    File.rename "../" + $fastlane_output_folder + "build_products.zip", output_file
end


# ---------- Run xctestrun tests (both unit and UI) ---------

desc "Run tests"
desc "This lane depends on the result of `build_tests` lane. Global variables have default values"
desc "that should be working if lanes are run on your local machine."
desc ""
desc "Usage: `fastlane run_testplan icos:true testplan:ProtonVPN-iOS-Unit-All`"
desc "Usage: `fastlane run_testplan macos:true testplan:ProtonVPN-macOS-Unit-All`"
lane :run_testplan do |options|
  
    architecture = "arm64-x86_64"
    xctestrunFolder = $derived_data_path_temporary + "Build/Products/"
    testplan = options[:testplan]

    if options[:ios]
      destination = "iphonesimulator16.4"
      devices = $ios_test_device
      output_folder_path = $output_folder_ios
      destination_xcodebuild = nil
      scheme = "ProtonVPN-iOS"
    
    elsif options[:macos]
      destination = "macosx13.3"
      devices = nil
      output_folder_path = $output_folder_macos
      destination_xcodebuild = "platform=OS X"
      scheme = "ProtonVPN-macOS"

    end

    # Unzip Build Products folder from artifacts
    output_file = build_products_file(output_folder_path, scheme)
    puts "Unzipping Build Products (" + output_file + ") into: " + xctestrunFolder
    FileUtils.rm_rf "../" + xctestrunFolder # Delete folder before unpacking tests into it. Useful for local runs.
    FileUtils.mkdir_p "../" + xctestrunFolder
    `unzip "../#{output_file}" -d "../#{xctestrunFolder}"`

    # Find xctestrun file. XCode generates files with different names, so a little bit of logic is required here
    xctestrunFilename = find_xctestrun_filename("../" + xctestrunFolder, scheme, testplan, destination, architecture)
    xctestrunPath = xctestrunFolder + xctestrunFilename
    if xctestrunFilename == nil
      UI.user_error!("Can't find xctestrun file at " + xctestrunFolder)
    end

    # Finally run tests
    run_tests(
      scheme: scheme,
      derived_data_path: $derived_data_path_temporary,
      test_without_building: true,
      xctestrun: xctestrunPath,
      clean: false,
      skip_package_dependencies_resolution: true, # prevents fastlane from needlessly fetching all SPM dependencies before running tests
      testplan: testplan,
      devices: devices,
      result_bundle: true,
      destination: destination_xcodebuild,
    )

    # Prepare coverage report
    coverage_report_file = "test_output/coverage.json"
    `xcrun xccov view --report --json test_output/ProtonVPN-iOS.xcresult > #{coverage_report_file}`

    # Convert test coverage report to cobertura format for gitlab to understand
    `xcc generate #{coverage_report_file} test_output cobertura-xml --exclude-packages ProtonVPNTests`

    # Print test coverage to console
    puts `jq '"Total test coverage: \\(.lineCoverage * 100 | tostring | .[0:5])%"' #{coverage_report_file}`

end

# Form a full path to the archive file containing xctestrun for running tests
def build_products_file(path, scheme)
  return path + scheme + "_build_products.zip"
end

# XCode generates the name of xctestrun file by unknown rules. So we check all possible invariants 
# in order to find what we need.
def find_xctestrun_filename(path, scheme, testplan, destination, architecture)
  names = [
    scheme + "_" + scheme + "_" + destination + ".xctestrun",
    scheme + "_" + destination + ".xctestrun",
  ]

  if testplan != nil
    full = scheme + "_" + testplan + "_" + destination + "-" + architecture + ".xctestrun"
    names << full
  end

  names.each { |name|
    fullPath = path + name
    if File.exists?(fullPath)
      puts "Found xctestrun file at " + fullPath
      return name
    else 
      puts "File not found: " + fullPath
    end
  }
  return nil
end


## -------------------------- Old lanes. To be refactored / removed --------------------------


desc "Run BugReport on iOS UI tests"
lane :ios_bugreport_ui_test do
    simulator_name = ENV["CI_JOB_ID"]
    scan(
      scheme: "BugReportSampleiOSApp",
      derived_data_path: $derived_data_path_old,
      clean: true,
      result_bundle: true,
      skip_slack: true,
      devices: [simulator_name]
    )
end

desc "Run BugReport on mac UI tests"
lane :macos_bugreport_ui_test do
    scan(
      scheme: "BugReportSampleMacOSApp",
      derived_data_path: $derived_data_path_old,
      clean: true,
      result_bundle: true,
      skip_slack: true
    )
end

lane :create_macos_keychain do
  create_keychain(
    name: $keychain_name,
    password: ENV["DEVELOPER_KEYCHAIN_PASSWORD"],
    default_keychain: false,
    add_to_search_list: true,
    unlock: true,
    require_create: false,
    timeout: 1800
  )
  import_certificate(
    keychain_name: $keychain_name,
    keychain_password: ENV["DEVELOPER_KEYCHAIN_PASSWORD"],
    certificate_path: 'Certificates.p12',
    certificate_password: ENV["DEVELOPER_CERTIFICATE_PASSWORD"]
  )
end

lane :delete_macos_keychain do
  delete_keychain(
    name: $keychain_name
  )
end

lane :create_ios_keychain do
  create_keychain(
      name: $keychain_name,
      password: ENV["DEVELOPER_KEYCHAIN_PASSWORD"],
      default_keychain: false,
      add_to_search_list: true,
      unlock: true,
      lock_when_sleeps: false,
      lock_after_timeout: false,
      timeout: 1800
  )
  import_certificate(
      keychain_name: $keychain_name,
      keychain_password: ENV["DEVELOPER_KEYCHAIN_PASSWORD"],
      certificate_path: 'Certificates.p12',
      certificate_password: ENV["DISTRIBUTION_CERTIFICATE_PASSWORD"]
  )
end

lane :delete_ios_keychain do
  delete_keychain(
      name: $keychain_name
  )
end

desc "Run Onboarding module tests"
lane :onboarding_test do
    simulator_name = ENV["CI_JOB_ID"]
    scan(
      scheme: "OnboardingSampleApp",
      derived_data_path: $derived_data_path_old,
      clean: true,
      result_bundle: true,
      skip_slack: true,
      devices: [simulator_name]
    )
end

desc "Run iOS Modals module tests"
lane :modals_ios_test do
    simulator_name = ENV["CI_JOB_ID"]
    scan(
      scheme: "ModalsSampleApp",
      derived_data_path: $derived_data_path_old,
      clean: true,
      result_bundle: true,
      skip_slack: true,
      devices: [simulator_name]
    )
end

lane :ios_internal_beta do |options|
  if !options[:changelog]
      abort("Please provide a changelog by appending`changelog:\"<Log notes>\"` to running this lane")
  end

  if !options[:scheme]
    SCHEME = "ProtonVPN-iOS"
    BUNDLE_ID = "ch.protonmail.vpn"
  else
    SCHEME = options[:scheme]
    BUNDLE_ID = "ch.protonmail.vpn.debug" # Refactor this if more app versions are added
  end
  
  clear_derived_data

  increment_build_number(
    build_number: ENV["NEW_BUILD_NUMBER"],
    xcodeproj: "./apps/ios/iOS.xcodeproj"
  )
  # Prepare API key for contacting Apple APIs
  get_app_store_api_key

  # Release build
  build_app(
      scheme: SCHEME,
      clean: true,
      output_directory: "build/" + SCHEME + "/",
      export_method: "app-store",
      export_options: {
          provisioningProfiles: {
              "ch.protonmail.vpn" => "ProtonVPN Release",
              "ch.protonmail.vpn.OpenVPN-Extension" => "ProtonVPN OpenVPN Release",
              "ch.protonmail.vpn.widget" => "ProtonVPN Widget Release",
              "ch.protonmail.vpn.Siri-Shortuct-Handler" => "ProtonVPN Siri Shortcuts Release",
              "ch.protonmail.vpn.WireGuardiOS-Extension" => "ProtonVPN Wireguard extension Release"
          }
      }
  )

  # Updload dSYMs to Sentry
  # Uncomment when sentry starts working... if ever
  #appVersion = get_version_number(xcodeproj: "./apps/ios/iOS.xcodeproj", target: "ProtonVPN")
  #appBuild = get_build_number(xcodeproj: "./apps/ios/iOS.xcodeproj")
  
  # Uncomment when sentry starts working... if ever
  #sentry_create_release(
  #  app_identifier: BUNDLE_ID,
  #  build: appBuild,
  #  version: appVersion
  #)
  
  # Uncomment when sentry starts working... if ever
  #  sentry_set_commits(
  #    app_identifier: BUNDLE_ID,
  #    build: appBuild,
  #    version: appVersion
  #  )

  # Uncomment when sentry starts working... if ever
  #sentry_create_deploy(
  #  app_identifier: BUNDLE_ID,
  #  version: appVersion,
  #  build: appBuild,
  #  env: 'testflight'
  #)
  #sentry_upload_dsym
  
  
  upload_to_testflight(
    app_identifier: BUNDLE_ID,
    team_name: "Proton AG",
    groups: ["Internal Members"],
    changelog: options[:changelog],
    distribute_external: true,
    demo_account_required: true
  )

end

lane :mac_update_build_numbers do
  increment_build_number(
    build_number: ENV["BUILD_NUMBER"],
    xcodeproj: "./apps/macos/macOS.xcodeproj"
  )

end

def get_app_store_api_key
  app_store_connect_api_key(
    key_id: ENV["APPSTORE_API_KEY_ID"],
    issuer_id: ENV["APPSTORE_API_KEY_ISSUER"],
    key_content: ENV["APPSTORE_API_KEY"],
    duration: 1200,
    in_house: false
  )
end
