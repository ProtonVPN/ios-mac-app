stages:  
  - linting
  - core_unit_tests
  - apps_unit_tests
  - apps_ui_tests
  - bot
  - release

variables:
  LC_ALL: "en_US.UTF-8"
  LANG: "en_US.UTF-8"
  CI_KEYCHAIN_NAME: $CI_JOB_ID
  # We use this variable when we run publish-github jobs
  RELEASE_GITHUB_REPOSITORY: git@github.com:ProtonVPN/ios-mac-app.git

include:
  - project: 'translations/generator'
    ref: master
    file: '/jobs/sync-crowdin.gitlab-ci.yml'

  - project: 'translations/generator'
    ref: master
    file: '/jobs/commit-locales.gitlab-ci.yml'

  - project: 'agarroux/publish-github'
    ref: feat/github-app
    file: '/jobs/release.gitlab-ci.yml'

  - template: Code-Quality.gitlab-ci.yml

code_quality:
  dependencies: []
  stage: linting
  artifacts:
    paths:
      - codequality_report.json
    reports:
      codequality: codequality_report.json
  script:    
    - fastlane/code_quality.sh
  tags:
    - iOS_ARM
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: always
    - if: $CI_COMMIT_BRANCH == "develop"
      when: always
    - when: manual

core_lint:  
  stage: linting  
  tags:
    - iOS_ARM
  script:
    - cd libraries/vpncore
    - ../../Pods/SwiftLint/swiftlint --strict --reporter junit > ../../swiftlint.xml
  allow_failure: false
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: always
    - if: $CI_COMMIT_BRANCH == "develop"
      when: always
    - when: manual
  artifacts:
    name: "core-lint-$CI_COMMIT_TAG"
    paths:
      - swiftlint.xml
    reports:
      junit:
        - swiftlint.xml
    expire_in: 90 days

ios_lint:
  stage: linting  
  tags:
    - iOS_ARM
  script:
    - cd apps/iOS
    - ../../Pods/SwiftLint/swiftlint --strict --reporter junit > ../../swiftlint.xml
  allow_failure: false
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: always
    - if: $CI_COMMIT_BRANCH == "develop"
      when: always
    - when: manual
  artifacts:
    name: "ios-lint-$CI_COMMIT_TAG"
    paths:
      - swiftlint.xml
    reports:
      junit:
        - swiftlint.xml
    expire_in: 90 days

macos_lint:
  stage: linting  
  tags:
    - macOS_ARM
  script:
    - cd apps/macos
    - ../../Pods/SwiftLint/swiftlint --strict --reporter junit > ../../swiftlint.xml
  allow_failure: false
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: always
    - if: $CI_COMMIT_BRANCH == "develop"
      when: always
    - when: manual
  artifacts:
    name: "ios-lint-$CI_COMMIT_TAG"
    paths:
      - swiftlint.xml
    reports:
      junit:
        - swiftlint.xml
    expire_in: 90 days    
    
bugreport_lint:
  stage: linting  
  tags:
    - iOS_ARM
  script:
    - cd libraries/BugReport
    - ../../Pods/SwiftLint/swiftlint --strict --reporter junit > ../../swiftlint.xml
  allow_failure: false
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: always
    - if: $CI_COMMIT_BRANCH == "develop"
      when: always
    - when: manual
  artifacts:
    name: "bug-report-lint-$CI_COMMIT_TAG"
    paths:
      - swiftlint.xml
    reports:
      junit:
        - swiftlint.xml
    expire_in: 90 days

onboarding_lint:
  stage: linting  
  tags:
    - iOS_ARM
  script:
    - cd libraries/Onboarding
    - ../../Pods/SwiftLint/swiftlint --strict --reporter junit > ../../swiftlint.xml
  allow_failure: false
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: always
    - if: $CI_COMMIT_BRANCH == "develop"
      when: always
    - when: manual
  artifacts:
    name: "onboarding-lint-$CI_COMMIT_TAG"
    paths:
      - swiftlint.xml
    reports:
      junit:
        - swiftlint.xml
    expire_in: 90 days

search_lint:
  stage: linting  
  tags:
    - iOS_ARM
  script:
    - cd libraries/Search
    - ../../Pods/SwiftLint/swiftlint --strict --reporter junit > ../../swiftlint.xml
  allow_failure: false
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: always
    - if: $CI_COMMIT_BRANCH == "develop"
      when: always
    - when: manual
  artifacts:
    name: "search-lint-$CI_COMMIT_TAG"
    paths:
      - swiftlint.xml
    reports:
      junit:
        - swiftlint.xml
    expire_in: 90 days      

modals_lint:
  stage: linting  
  tags:
    - iOS_ARM
  script:
    - cd libraries/Modals
    - ../../Pods/SwiftLint/swiftlint --strict --reporter junit > ../../swiftlint.xml
  allow_failure: false
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: always
    - if: $CI_COMMIT_BRANCH == "develop"
      when: always
    - when: manual
  artifacts:
    name: "modals-report-lint-$CI_COMMIT_TAG"
    paths:
      - swiftlint.xml
    reports:
      junit:
        - swiftlint.xml
    expire_in: 90 days

review_lint:
  stage: linting  
  tags:
    - iOS_ARM
  script:
    - cd libraries/Review
    - ../../Pods/SwiftLint/swiftlint --strict --reporter junit > ../../swiftlint.xml
  allow_failure: false
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: always
    - if: $CI_COMMIT_BRANCH == "develop"
      when: always
    - when: manual
  artifacts:
    name: "review-report-lint-$CI_COMMIT_TAG"
    paths:
      - swiftlint.xml
    reports:
      junit:
        - swiftlint.xml
    expire_in: 90 days

wireguard_extension_lint:
  stage: linting  
  tags:
    - iOS_ARM
  script:
    - cd libraries/WireguardExtension
    - ../../Pods/SwiftLint/swiftlint --strict --reporter junit > ../../swiftlint.xml
  allow_failure: false
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: always
    - if: $CI_COMMIT_BRANCH == "develop"
      when: always
    - when: manual
  artifacts:
    name: "wireguard_extension-report-lint-$CI_COMMIT_TAG"
    paths:
      - swiftlint.xml
    reports:
      junit:
        - swiftlint.xml
    expire_in: 90 days       

core_ios_unit_tests:
  stage: core_unit_tests
  tags:
    - iOS_ARM
  script:
    - xcrun simctl create ${CI_JOB_ID} com.apple.CoreSimulator.SimDeviceType.iPhone-11 `xcrun simctl list runtimes | grep iOS | awk '{print $NF}'`
    - fastlane ios_core_test
    - fastlane/print-coverage.sh fastlane/test_output/vpncore-ios.xcresult vpncore.framework
    - xcrun xccov view --report --json fastlane/test_output/vpncore-ios.xcresult > coverage.json
    - xcc generate coverage.json fastlane/test_output cobertura-xml --exclude-packages Tests
  after_script:
    - xcrun simctl delete $CI_JOB_ID
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: always
    - if: $CI_COMMIT_BRANCH == "develop"
      when: always
    - when: manual
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: fastlane/test_output/cobertura.xml
      junit:
        - fastlane/test_output/report.junit

bugreport_unit_tests:
  stage: core_unit_tests
  tags:
    - iOS_ARM
  script:
    - cd libraries/BugReport/
    - swift test --enable-code-coverage
    - mkdir -p ../../fastlane/test_output
    - XCODE_PATH=`xcode-select -p`
    - ARCH="$(uname -m)"
    - $XCODE_PATH/Toolchains/XcodeDefault.xctoolchain/usr/bin/llvm-cov export -instr-profile=.build/$ARCH-apple-macosx/debug/codecov/default.profdata .build/$ARCH-apple-macosx/debug/BugReportPackageTests.xctest/Contents/MacOS/BugReportPackageTests -format=lcov > ../../fastlane/test_output/BugReport.lcov
    - cd -
    - python3 `pip3 show lcov_cobertura | grep Location | cut -d " " -f2`/lcov_cobertura.py fastlane/test_output/BugReport.lcov -o fastlane/test_output/BugReport.xml
    - Scripts/print-coverage-cobertura.sh fastlane/test_output/BugReport.xml
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: always
    - if: $CI_COMMIT_BRANCH == "develop"
      when: always
    - when: manual
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: fastlane/test_output/BugReport.xml

review_unit_tests:
  stage: core_unit_tests
  tags:
    - iOS_ARM
  script:
    - cd libraries/Review/
    - swift test --enable-code-coverage
    - mkdir -p ../../fastlane/test_output
    - XCODE_PATH=`xcode-select -p`
    - ARCH="$(uname -m)"
    - $XCODE_PATH/Toolchains/XcodeDefault.xctoolchain/usr/bin/llvm-cov export -instr-profile=.build/$ARCH-apple-macosx/debug/codecov/default.profdata .build/$ARCH-apple-macosx/debug/ReviewPackageTests.xctest/Contents/MacOS/ReviewPackageTests -format=lcov > ../../fastlane/test_output/Review.lcov
    - cd -
    - python3 `pip3 show lcov_cobertura | grep Location | cut -d " " -f2`/lcov_cobertura.py fastlane/test_output/Review.lcov -o fastlane/test_output/Review.xml
    - Scripts/print-coverage-cobertura.sh fastlane/test_output/Review.xml
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: always
    - if: $CI_COMMIT_BRANCH == "develop"
      when: always
    - when: manual
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: fastlane/test_output/Review.xml    

search_ios_unit_tests:
  stage: core_unit_tests
  tags:
    - iOS_ARM
  script:
    - xcrun simctl create ${CI_JOB_ID} com.apple.CoreSimulator.SimDeviceType.iPhone-11 `xcrun simctl list runtimes | grep iOS | awk '{print $NF}'`
    - fastlane ios_search_test
    - fastlane/print-coverage.sh fastlane/test_output/Search.xcresult Search 1
    - xcrun xccov view --report --json fastlane/test_output/Search.xcresult > coverage.json
    - xcc generate coverage.json fastlane/test_output cobertura-xml --exclude-packages Tests
  after_script:
    - xcrun simctl delete $CI_JOB_ID
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: always
    - if: $CI_COMMIT_BRANCH == "develop"
      when: always
    - when: manual
  artifacts:
    reports:
      junit:
        - fastlane/test_output/report.junit
      coverage_report:
        coverage_format: cobertura
        path: fastlane/test_output/cobertura.xml

modals_ios_unit_tests:
  stage: core_unit_tests
  tags:
    - iOS_ARM
  script:
    - xcrun simctl create ${CI_JOB_ID} com.apple.CoreSimulator.SimDeviceType.iPhone-11 `xcrun simctl list runtimes | grep iOS | awk '{print $NF}'`
    - fastlane ios_modals_test
    - fastlane/print-coverage.sh fastlane/test_output/Modals.xcresult Modals 1
    - xcrun xccov view --report --json fastlane/test_output/Modals.xcresult > coverage.json
    - xcc generate coverage.json fastlane/test_output cobertura-xml --exclude-packages Tests
  after_script:
    - xcrun simctl delete $CI_JOB_ID
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: always
    - if: $CI_COMMIT_BRANCH == "develop"
      when: always
    - when: manual
  artifacts:
    reports:
      junit:
        - fastlane/test_output/report.junit
      coverage_report:
        coverage_format: cobertura
        path: fastlane/test_output/cobertura.xml

core_macos_unit_tests:
  stage: core_unit_tests
  tags:
    - macOS_ARM
  script:
    - base64 -D -o Certificates.p12 <<< $DEVELOPER_CERTIFICATE
    - fastlane create_macos_keychain
    - fastlane macos_core_test
    - fastlane/print-coverage.sh fastlane/test_output/vpncore-macos.xcresult vpncore.framework
    - xcrun xccov view --report --json fastlane/test_output/vpncore-macos.xcresult > coverage.json
    - xcc generate coverage.json fastlane/test_output cobertura-xml --exclude-packages Tests
  after_script: # Cleanup
    - fastlane delete_macos_keychain
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: always
    - if: $CI_COMMIT_BRANCH == "develop"
      when: always
    - when: manual
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: fastlane/test_output/cobertura.xml
      junit:
        - fastlane/test_output/report.junit

wireguard_unit_tests:
  stage: apps_unit_tests
  tags:
    - iOS_ARM
  script:
    - xcrun simctl create ${CI_JOB_ID} com.apple.CoreSimulator.SimDeviceType.iPhone-11 `xcrun simctl list runtimes | grep iOS | awk '{print $NF}'`
    - cd apps/ios/ProtonVPN/ && ../../../libraries/vpncore/Source/prepare_obfuscated_constants.sh && cd ../../../
    - cd apps/ios/ProtonVPNUITests/ && ../../../Scripts/UITests/prepare_credentials.sh && cd ../../../
    - defaults write com.apple.iphonesimulator ConnectHardwareKeyboard 0 # Fixed UI tests failing on secure field
    - fastlane wireguard_networkextension_tests
    - xcrun xccov view --report --json fastlane/test_output/WireGuardNetworkExtensionTests.xcresult > coverage.json
  after_script:
    - xcrun simctl delete $CI_JOB_ID
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: always
    - if: $CI_COMMIT_BRANCH == "develop"
      when: always
    - when: manual
  artifacts:
    reports:
      junit:
        - fastlane/test_output/report.junit

ios_unit_tests:
  stage: apps_unit_tests
  tags:
    - iOS_ARM
  script:
    - xcrun simctl create ${CI_JOB_ID} com.apple.CoreSimulator.SimDeviceType.iPhone-11 `xcrun simctl list runtimes | grep iOS | awk '{print $NF}'`
    - cd apps/ios/ProtonVPN/ && ../../../libraries/vpncore/Source/prepare_obfuscated_constants.sh && cd ../../../
    - cd apps/ios/ProtonVPNUITests/ && ../../../Scripts/UITests/prepare_credentials.sh && cd ../../../
    - defaults write com.apple.iphonesimulator ConnectHardwareKeyboard 0 # Fixed UI tests failing on secure field
    - fastlane ios_app_unit_test
    - fastlane/print-coverage.sh fastlane/test_output/ProtonVPN-iOS.xcresult ProtonVPN.app
    - xcrun xccov view --report --json fastlane/test_output/ProtonVPN-iOS.xcresult > coverage.json
    - xcc generate coverage.json fastlane/test_output cobertura-xml --exclude-packages ProtonVPNTests
  after_script:
    - xcrun simctl delete $CI_JOB_ID
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: always
    - if: $CI_COMMIT_BRANCH == "develop"
      when: always
    - when: manual
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: fastlane/test_output/cobertura.xml
      junit:
        - fastlane/test_output/report.junit

ios_ui_tests:
  stage: apps_ui_tests
  tags:
    - iOS_ARM
  script:
    - xcrun simctl create ${CI_JOB_ID} com.apple.CoreSimulator.SimDeviceType.iPhone-11 `xcrun simctl list runtimes | grep iOS | awk '{print $NF}'`
    - cd apps/ios/ProtonVPN/ && ../../../libraries/vpncore/Source/prepare_obfuscated_constants.sh && cd ../../../
    - cd apps/ios/ProtonVPNUITests/ && ../../../Scripts/UITests/prepare_credentials.sh && cd ../../../
    - defaults write com.apple.iphonesimulator ConnectHardwareKeyboard 0 # Fixed UI tests failing on secure field
    - fastlane ios_app_ui_test
    - fastlane/print-coverage.sh fastlane/test_output/ProtonVPN-iOS.xcresult ProtonVPN.app
  after_script:
    - xcrun simctl delete $CI_JOB_ID
  rules:
#  Bring this back after UI tests flakiness is fixed
#    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
#      when: always
#    - if: $CI_COMMIT_BRANCH == "develop"
#      when: always
    - when: manual
  when: manual
  artifacts:
    reports:
      junit:
        - fastlane/test_output/report.junit        

onboarding_ui_tests:
  stage: apps_ui_tests
  tags:
    - iOS_ARM
  script:
    - xcrun simctl create ${CI_JOB_ID} com.apple.CoreSimulator.SimDeviceType.iPhone-11 `xcrun simctl list runtimes | grep iOS | awk '{print $NF}'`    
    - fastlane onboarding_test
  after_script:
    - xcrun simctl delete $CI_JOB_ID
  when: manual
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: always
    - if: $CI_COMMIT_BRANCH == "develop"
      when: always
    - when: manual
  artifacts:
    name: "onboarding-tests-$CI_COMMIT_TAG"
    when: always
    paths:
      - fastlane/test_output/
    expire_in: 3 days
    reports:
      junit:
        - fastlane/test_output/report.junit

modals_unit_tests:
  stage: apps_unit_tests
  tags:
    - iOS_ARM
  script:
    - xcrun simctl create ${CI_JOB_ID} com.apple.CoreSimulator.SimDeviceType.iPhone-11 `xcrun simctl list runtimes | grep iOS | awk '{print $NF}'`    
    - fastlane modals_ios_test
  after_script:
    - xcrun simctl delete $CI_JOB_ID
  when: always
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: always
    - if: $CI_COMMIT_BRANCH == "develop"
      when: always
    - when: manual
  artifacts:
    name: "modals-tests-$CI_COMMIT_TAG"
    when: always
    paths:
      - fastlane/test_output/
    expire_in: 3 days
    reports:
      junit:
        - fastlane/test_output/report.junit

ios_bugreport_ui_tests:
  stage: apps_ui_tests
  tags:
    - iOS_ARM
  script:
    - xcrun simctl create ${CI_JOB_ID} com.apple.CoreSimulator.SimDeviceType.iPhone-11 `xcrun simctl list runtimes | grep iOS | awk '{print $NF}'`
    - fastlane ios_bugreport_ui_test
    - fastlane/print-coverage.sh fastlane/test_output/BugReportSampleiOSApp.xcresult "BugReport " 2
  after_script:
    - xcrun simctl delete $CI_JOB_ID
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: always
    - if: $CI_COMMIT_BRANCH == "develop"
      when: always
    - when: manual
  artifacts:
    reports:
      junit:
        - fastlane/test_output/report.junit

macos_bugreport_ui_tests:
  stage: apps_ui_tests
  tags:
    - macOS_ARM
  script:
    - fastlane macos_bugreport_ui_test
    - fastlane/print-coverage.sh fastlane/test_output/BugReportSampleMacOSApp.xcresult "BugReport " 1
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: always
    - if: $CI_COMMIT_BRANCH == "develop"
      when: always
    - when: manual
  artifacts:
    reports:
      junit:
        - fastlane/test_output/report.junit
        
macos_unit_tests:
  dependencies: []
  stage: apps_unit_tests
  script:
    - cd apps/macos/ProtonVPN/ && ../../../libraries/vpncore/Source/prepare_obfuscated_constants.sh && cd ../../../
    - cd apps/macos/ProtonVPNUITests/ && ../../../Scripts/UITests/prepare_credentials.sh && cd ../../../
    - base64 -D -o Certificates.p12 <<< $DEVELOPER_CERTIFICATE
    - mkdir -pv ~/Library/MobileDevice/Provisioning\ Profiles/
    - base64 -D -o ~/Library/MobileDevice/Provisioning\ Profiles/ProtonVPN_Mac_Development_PP.provisionprofile <<< $DEVELOPMENT_PROFILE
    - base64 -D -o ~/Library/MobileDevice/Provisioning\ Profiles/ProtonVPN_OpenVPN_Development_PP.provisionprofile <<< $DEVELOPMENT_PROFILE_OVPN
    - base64 -D -o ~/Library/MobileDevice/Provisioning\ Profiles/ProtonVPN_WireGuard_Development_PP.provisionprofile <<< $DEVELOPMENT_PROFILE_WG
    - fastlane create_macos_keychain
    - fastlane macos_app_unit_test
    - fastlane/print-coverage.sh fastlane/test_output/ProtonVPN-macOS.xcresult ProtonVPN.app
    - xcrun xccov view --report --json fastlane/test_output/ProtonVPN-macOS.xcresult > coverage.json
    - xcc generate coverage.json fastlane/test_output cobertura-xml --exclude-packages ProtonVPNTests
  after_script: # Cleanup
    - rm -f ~/Library/MobileDevice/Provisioning\ Profiles/ProtonVPN_Mac_Development_PP.provisionprofile
    - rm -f ~/Library/MobileDevice/Provisioning\ Profiles/ProtonVPN_OpenVPN_Development_PP.provisionprofile
    - rm -f ~/Library/MobileDevice/Provisioning\ Profiles/ProtonVPN_WireGuard_Development_PP.provisionprofile
    - fastlane delete_macos_keychain
  tags:
    - macOS_ARM
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: always
    - if: $CI_COMMIT_BRANCH == "develop"
      when: always
    - when: manual
  artifacts:
    name: "macos-tests-$CI_COMMIT_TAG"
    when: always
    paths:
      - fastlane/test_output/
    expire_in: 3 days
    reports:
      coverage_report:
        coverage_format: cobertura
        path: fastlane/test_output/cobertura.xml
      junit:
        - fastlane/test_output/report.junit

macos_ui_tests:
  dependencies: []
  stage: apps_ui_tests
  script:
    - cd apps/macos/ProtonVPN/ && ../../../libraries/vpncore/Source/prepare_obfuscated_constants.sh && cd ../../../
    - cd apps/macos/ProtonVPNUITests/ && ../../../Scripts/UITests/prepare_credentials.sh && cd ../../../
    - base64 -D -o Certificates.p12 <<< $DEVELOPER_CERTIFICATE
    - mkdir -pv ~/Library/MobileDevice/Provisioning\ Profiles/
    - base64 -D -o ~/Library/MobileDevice/Provisioning\ Profiles/ProtonVPN_Mac_Development_PP.provisionprofile <<< $DEVELOPMENT_PROFILE
    - base64 -D -o ~/Library/MobileDevice/Provisioning\ Profiles/ProtonVPN_OpenVPN_Development_PP.provisionprofile <<< $DEVELOPMENT_PROFILE_OVPN
    - base64 -D -o ~/Library/MobileDevice/Provisioning\ Profiles/ProtonVPN_WireGuard_Development_PP.provisionprofile <<< $DEVELOPMENT_PROFILE_WG
    - fastlane create_macos_keychain
    - fastlane macos_app_ui_test
    - fastlane/print-coverage.sh fastlane/test_output/ProtonVPN-macOS.xcresult ProtonVPN.app
  after_script: # Cleanup
    - rm -f ~/Library/MobileDevice/Provisioning\ Profiles/ProtonVPN_Mac_Development_PP.provisionprofile
    - rm -f ~/Library/MobileDevice/Provisioning\ Profiles/ProtonVPN_OpenVPN_Development_PP.provisionprofile
    - rm -f ~/Library/MobileDevice/Provisioning\ Profiles/ProtonVPN_WireGuard_Development_PP.provisionprofile
    - fastlane delete_macos_keychain
  rules:
#  Bring this back after UI tests flakiness is fixed
#    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
#      when: always
#    - if: $CI_COMMIT_BRANCH == "develop"
#      when: always
    - when: manual
  tags:
    - macOS_ARM
  artifacts:
    name: "macos-tests-$CI_COMMIT_TAG"
    when: always
    paths:
      - fastlane/test_output/
    expire_in: 3 days
    reports:
      junit:
        - fastlane/test_output/report.junit        

# --- Deployment ---

ios_testflight_internal:
  stage: release
  before_script:
    - git config --global user.email $GIT_CI_EMAIL
    - git config --global user.name $GIT_CI_USERNAME
    - base64 -D -o Certificates.p12 <<< $DISTRIBUTION_CERTIFICATE
    - fastlane create_ios_keychain
  script:
    - fastlane sigh download_all --download_xcode_profiles
    - export atlasSecret="static let atlasSecret = \"`(curl $ATLAS_TOKEN_URL)`\""
    - cd apps/ios/ProtonVPN/ && ../../../libraries/vpncore/Source/prepare_obfuscated_constants.sh && cd ../../../
    - export NEW_BUILD_NUMBER=$(./fastlane/generate_build_number.sh)
    - echo $NEW_BUILD_NUMBER
    - export CHANGELOG=$(git log $(git tag -l 'ios/beta/*' --sort=-version:refname:strip=2 | head -n 1)..HEAD --pretty="format:- %s" -- . ':(exclude)apps/macos*')
    - echo $CHANGELOG
    - fastlane ios_internal_beta changelog:"$CHANGELOG"
    - ./fastlane/add_git_tag.sh
    - fastlane delete_ios_keychain ## Re-create keychain to have less problems
    - fastlane create_ios_keychain
    - fastlane ios_internal_beta changelog:"$CHANGELOG" scheme:"ProtonVPN-iOS-Staging"
  after_script: # Cleanup
    - rm -f Certificates.p12
    - fastlane delete_ios_keychain
  tags:
    - iOS-deploy
  environment:
    name: deployment
  rules:
    # No release on TAGs
    - if: $CI_COMMIT_TAG
      when: never
    # Prevent pipeline on MR creation
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: never
    # Release after each push to develop
    - if: $CI_COMMIT_BRANCH == "develop"
      when: on_success
    # Otherwise allow manual release
    - when: manual
  variables:
    CI_KEYCHAIN_NAME: "IOS_RELEASE"
  artifacts:
    name: "ios-build-nr"
    when: always
    paths:
      - .last_build_nr
      - build/
    exclude:
      - build/*.ipa
    expire_in: 60 days

mac_release_internal:
  stage: release
  variables:
    APP_BRANCH: $CI_COMMIT_BRANCH
  rules:
    # No release on TAGs
    - if: $CI_COMMIT_TAG
      when: never
    # Prevent pipeline on MR creation
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: never
    # Release after each push to develop
    - if: $CI_COMMIT_BRANCH == "develop"
      when: on_success
    # Otherwise allow manual release
    - when: manual
  trigger:
    project: apple/vpn/mac-ci
    branch: mac-v2
    strategy: depend

# --- Translation related tasks ---
# Jobs comes from the generator inside gitlab translations/generator
# Config for the project itself (i18n config) is inside translations/config-app
i18n-crowdin-upload:
  stage: bot
  variables:
      I18N_SYNC_CROWDIN_PROJECT: 'apple-vpn'
      I18N_EXTRACT_FROM_DIRECTORIES: 'libraries/vpncore,libraries/BugReport,libraries/Onboarding,libraries/Modals,libraries/Search'
  extends: .i18n-sync-crowdin-shared-apple
  before_script:
    - sh fastlane/adjust-for-strings-export.sh
    - !reference [.i18n-sync-crowdin-shared-apple, before_script]

i18n-crowdin-download:
  stage: bot
  variables:
      I18N_COMMIT_CROWDIN_PROJECT: 'apple-vpn'
      I18N_EXTRACT_FROM_DIRECTORIES: 'libraries/vpncore,libraries/BugReport,libraries/Onboarding,libraries/Modals,libraries/Search'
  extends: .i18n-commit-locales-shared-apple
  before_script:
    - sh fastlane/adjust-for-strings-export.sh
    - !reference [.i18n-commit-locales-shared-apple, before_script]

# --- Open Source GitHub related tasks ---
github-push-commits:
  stage: bot
  extends: .release-sync-commit-shared
  variables:
    RELEASE_SYNC_TO_BRANCH: 'develop'
    RELEASE_SYNC_FROM_BRANCH: 'develop'
  # Run the job only if we have a tag ex:
  #   - mac/1.1.1111111
  #   - ios/1.1.1
  only: &onlyTagsFilterOpenSource
    refs:
      - tags
    variables:
      - $CI_COMMIT_TAG =~ /^(mac|ios)\/\d+\.\d+\.\d+$/

github-push-tag:
  extends: .release-sync-tags-shared
  variables:
    RELEASE_SYNC_FROM_BRANCH: 'develop'
  only:
    <<: *onlyTagsFilterOpenSource

sonarqube-check:
  stage: linting
  image: 
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task    
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - sonar-scanner
  allow_failure: true
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: always
    - if: $CI_COMMIT_BRANCH == "develop"
      when: always
    - when: manual
