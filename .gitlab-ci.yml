stages:  
  - linting
  - unit_tests
  - ui_smoke_tests
  - ui_full_tests
  - bot
  - release

variables:
  LC_ALL: "en_US.UTF-8"
  LANG: "en_US.UTF-8"
  CI_KEYCHAIN_NAME: $CI_JOB_ID
  # We use this variable when we run publish-github jobs
  RELEASE_GITHUB_REPOSITORY: git@github.com:ProtonVPN/ios-mac-app.git

include:
  - project: 'translations/generator'
    ref: master
    file: '/jobs/sync-crowdin.gitlab-ci.yml'

  - project: 'translations/generator'
    ref: master
    file: '/jobs/commit-locales.gitlab-ci.yml'

  - project: 'agarroux/publish-github'
    ref: feat/github-app
    file: '/jobs/release.gitlab-ci.yml'

  - template: Code-Quality.gitlab-ci.yml
  
  # Include all jobs from all the files on `.gitlab/jobs/` folder
  - local: '.gitlab/jobs/*.yml'

commit_quality:
  stage: linting
  image: protonjohn/commitlint-docker:latest
  script:
    - export NO_VIRTUALENV="YES"
    - scripts/git-cz setup
    - scripts/git-cz lintci
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: always
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: always
    - if: $CI_COMMIT_BRANCH == "develop"
      when: always
    - when: manual

# Runs a script that goes through all out apps and lib folders and lints them if .swiftlint file is available.
#
# More info on how it works:
# https://blog.kulman.sk/using-swiftlint-for-gitlab-code-quality/
code_quality:
  extends:
    - .mr_job_template
    - .ios_job_template
  stage: linting
  artifacts:
    paths:
      - codequality_report.json
    reports:
      codequality: codequality_report.json
  script:    
    - scripts/code_quality.sh
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: always
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: always
    - if: $CI_COMMIT_BRANCH == "develop"
      when: always
    - if: $CI_COMMIT_TAG
      when: always
    - when: manual


# Reenable when/if we have a license
#sonarqube-check:
#  stage: linting
#  image:
#    name: sonarsource/sonar-scanner-cli:latest
#    entrypoint: [""]
#  variables:
#    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
#    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
#  cache:
#    key: "${CI_JOB_NAME}"
#    paths:
#      - .sonar/cache
#  script:
#    - sonar-scanner
#  allow_failure: true
#  rules:
#    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
#      when: always
#    - if: $CI_COMMIT_BRANCH == "develop"
#      when: always
#    - when: manual
