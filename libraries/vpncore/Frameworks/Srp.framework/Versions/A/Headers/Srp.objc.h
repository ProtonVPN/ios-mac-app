// Objective-C API for talking to go-srp Go package.
//   gobind -lang=objc go-srp
//
// File is generated by gobind. Do not edit.

#ifndef __Srp_H__
#define __Srp_H__

@import Foundation;
#include "Universe.objc.h"


@class SrpAuth;
@class SrpProofs;

/**
 * Auth stores byte data for the calculation of SRP proofs.
 * Changed SrpAuto to Auth because the name will be used as srp.SrpAuto by other packages and as SrpSrpAuth on mobile
 * Also the data from the API called Auth. it could be match the meaning and reduce the confusion
 */
@interface SrpAuth : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) id _ref;

- (instancetype)initWithRef:(id)ref;
/**
 * NewAuth Creates new Auth from strings input. Salt and server ephemeral are in
base64 format. Modulus is base64 with signature attached. The signature is
verified against server key. The version controls password hash algorithm.

Parameters:
	 - version int: The *x* component of the vector.
	 - username string: The *y* component of the vector.
	 - password string: The *z* component of the vector.
	 - salt string:
Returns:
  - auth *Auth: the pre caculated auth information
  - err error: throw error
Usage:

Warnings:
	 - Be carefull! Poos can hurt.
 */
- (instancetype)init:(long)version username:(NSString*)username password:(NSString*)password salt:(NSString*)salt signedModulus:(NSString*)signedModulus serverEphemeral:(NSString*)serverEphemeral;
/**
 * NewAuthForVerifier Creates new Auth from strings input. Salt and server ephemeral are in
base64 format. Modulus is base64 with signature attached. The signature is
verified against server key. The version controls password hash algorithm.

Parameters:
	 - version int: The *x* component of the vector.
	 - username string: The *y* component of the vector.
	 - password string: The *z* component of the vector.
	 - salt string:
Returns:
  - auth *Auth: the pre caculated auth information
  - err error: throw error
Usage:

Warnings:
	 - none.
 */
- (instancetype)initForVerifier:(NSString*)password signedModulus:(NSString*)signedModulus rawSalt:(NSData*)rawSalt;
- (NSData*)modulus;
- (void)setModulus:(NSData*)v;
- (NSData*)serverEphemeral;
- (void)setServerEphemeral:(NSData*)v;
- (NSData*)hashedPassword;
- (void)setHashedPassword:(NSData*)v;
/**
 * GenerateProofs calculates SPR proofs.
 */
- (SrpProofs*)generateProofs:(long)bitLength error:(NSError**)error;
/**
 * GenerateVerifier verifier for update pwds and create accounts
 */
- (NSData*)generateVerifier:(long)bitLength error:(NSError**)error;
@end

/**
 * Proofs Srp Proofs object. Changed SrpProofs to Proofs because the name will be used as srp.SrpProofs by other packages and as SrpSrpProofs on mobile
ClientProof []byte  client proof
ClientEphemeral []byte  calculated from
ExpectedServerProof []byte
 */
@interface SrpProofs : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) id _ref;

- (instancetype)initWithRef:(id)ref;
- (instancetype)init;
- (NSData*)clientProof;
- (void)setClientProof:(NSData*)v;
- (NSData*)clientEphemeral;
- (void)setClientEphemeral:(NSData*)v;
- (NSData*)expectedServerProof;
- (void)setExpectedServerProof:(NSData*)v;
@end

@interface Srp : NSObject
/**
 * ErrDataAfterModulus found extra data after decode the modulus
 */
+ (NSError*) errDataAfterModulus;
+ (void) setErrDataAfterModulus:(NSError*)v;

/**
 * ErrInvalidSignature invalid modulus signature
 */
+ (NSError*) errInvalidSignature;
+ (void) setErrInvalidSignature:(NSError*)v;

@end

FOUNDATION_EXPORT NSString* SrpGetModulusKey(void);

/**
 * HashPassword returns the hash of password argument. Based on version number
following arguments are used in addition to password:
* 0, 1, 2: userName and modulus
* 3, 4: salt and modulus
 */
FOUNDATION_EXPORT NSData* SrpHashPassword(long authVersion, NSString* password, NSString* userName, NSData* salt, NSData* modulus, NSError** error);

/**
 * MailboxPassword get mailbox password hash

Parameters:
	 - password string: a mailbox password
	 - salt []byte: a salt is random 128 bits data
Returns:
  - hashed string: a hashed password
  - err error: throw error
 */
FOUNDATION_EXPORT NSString* SrpMailboxPassword(NSString* password, NSData* salt, NSError** error);

/**
 * NewAuth Creates new Auth from strings input. Salt and server ephemeral are in
base64 format. Modulus is base64 with signature attached. The signature is
verified against server key. The version controls password hash algorithm.

Parameters:
	 - version int: The *x* component of the vector.
	 - username string: The *y* component of the vector.
	 - password string: The *z* component of the vector.
	 - salt string:
Returns:
  - auth *Auth: the pre caculated auth information
  - err error: throw error
Usage:

Warnings:
	 - Be carefull! Poos can hurt.
 */
FOUNDATION_EXPORT SrpAuth* SrpNewAuth(long version, NSString* username, NSString* password, NSString* salt, NSString* signedModulus, NSString* serverEphemeral, NSError** error);

/**
 * NewAuthForVerifier Creates new Auth from strings input. Salt and server ephemeral are in
base64 format. Modulus is base64 with signature attached. The signature is
verified against server key. The version controls password hash algorithm.

Parameters:
	 - version int: The *x* component of the vector.
	 - username string: The *y* component of the vector.
	 - password string: The *z* component of the vector.
	 - salt string:
Returns:
  - auth *Auth: the pre caculated auth information
  - err error: throw error
Usage:

Warnings:
	 - none.
 */
FOUNDATION_EXPORT SrpAuth* SrpNewAuthForVerifier(NSString* password, NSString* signedModulus, NSData* rawSalt, NSError** error);

FOUNDATION_EXPORT NSData* SrpRandomBits(long bits, NSError** error);

FOUNDATION_EXPORT NSData* SrpRandomBytes(long byes, NSError** error);

FOUNDATION_EXPORT NSString* SrpVersionNumber(void);

#endif
