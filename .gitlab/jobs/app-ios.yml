# Jobs for linting/testing/etc. Proton VPN iOS app.
# Stages and other useful stuff can be found in /.gitlab-ci.yml file
    

build:app:ios:
  extends: .ios_job_template
  dependencies: []
  stage: build
  script:
    - fastlane ios_build_debug
  rules:
    - when: manual
      allow_failure: true
  tags:
    - vpn-apple-builds
  artifacts:
    when: always
    paths:
      - build/
    expire_in: 3 days


build:tests:ios:
  extends:
    - .mr_job_template
    - .ios_job_template
  stage: build
  allow_failure: false
  tags:
    - vpn-apple-builds
  needs:
    - job: lint:code-quality
      artifacts: false
  script:
    - cd apps/ios/ProtonVPN/ && ../../../scripts/prepare_obfuscated_constants.sh && cd ../../../
    - fastlane build_tests ios:true
  artifacts:
    name: "ios-xctestrun"
    paths:
      - "${JOBS_OUTPUT_PATH}ios/"
    expire_in: 1 day
       

# Parts reused across unit and UI test jobs in this file

.ios_prepare_simulator: &ios_prepare_simulator
  - xcrun simctl create ${CI_JOB_ID} com.apple.CoreSimulator.SimDeviceType.iPhone-14 `xcrun simctl list runtimes | grep iOS | awk '{print $NF}'`
  - cd apps/ios/ProtonVPN/ && ../../../scripts/prepare_obfuscated_constants.sh && cd ../../../
  - defaults write com.apple.iphonesimulator ConnectHardwareKeyboard 0 # Fixed UI tests failing on secure field

.ios_delete_simulator: &ios_delete_simulator
  - xcrun simctl delete ${CI_JOB_ID}


.ios_tests_artifacts: &ios_tests_artifacts
    when: on_failure
    paths:
      - fastlane/test_output/
    expire_in: 2 days

# ---

test:unit:app:ios:
  extends:
    - .mr_job_template
    - .ios_job_template
  stage: test
  needs:
    - job: build:tests:ios
      artifacts: true
  script:
    - *ios_prepare_simulator 
    - fastlane run_testplan ios:true scheme:ProtonVPN-iOS testplan:ProtonVPN-iOS-Unit-All
  after_script:
    - *ios_delete_simulator
  artifacts:
    reports:
      !reference [.code_coverage_unit, reports] # Cobertura xml to artifacts
    name: "ios-unit-tests-result"
    <<: *ios_tests_artifacts


test:ui:app:ios:smoke:
  extends:
    - .mr_job_template
    - .ios_job_template
  stage: test_ui
  needs:
    - job: deploy:review
    - job: build:tests:ios
      artifacts: true
  script:
    - *ios_prepare_simulator 
    - fastlane run_testplan ios:true scheme:ProtonVPN-iOS testplan:ProtonVPN-iOS-UI-Smoke
  after_script:
    - *ios_delete_simulator
  artifacts:
    reports:
      !reference [.code_coverage_unit, reports] # Cobertura xml to artifacts
    name: "ios-ui-smoke-tests-result"
    <<: *ios_tests_artifacts


test:ui:app:ios:all:
  extends:
    - .ios_job_template
    - .ui_full_tests_template
  stage: test_ui
  needs:
    - job: deploy:review
    - job: build:tests:ios
      artifacts: true
  script:
    - *ios_prepare_simulator 
    - fastlane run_testplan ios:true scheme:ProtonVPN-iOS testplan:ProtonVPN-iOS-UI-All
  after_script:
    - *ios_delete_simulator
  artifacts:
    reports:
      !reference [.code_coverage_unit, reports] # Cobertura xml to artifacts
    name: "ios-ui-all-tests-result"
    <<: *ios_tests_artifacts


test:ui:app:ios:custom:
  extends:
    - .ios_job_template
  rules: &rules_custom
    - if: $CI_PIPELINE_SOURCE == "schedule" && '$CUSTOM_TEST_PLAN'
      when: always
  stage: test_ui
  needs:
    - job: deploy:review
    - job: build:tests:ios
      artifacts: true
  script:
    - *ios_prepare_simulator
    - fastlane run_testplan ios:true scheme:ProtonVPN-iOS testplan:$CUSTOM_TEST_PLAN
  after_script:
    - *ios_delete_simulator
  artifacts:
    reports:
      !reference [.code_coverage_unit, reports] # Cobertura xml to artifacts
    name: "ios-ui-custom-tests-result"
    <<: *ios_tests_artifacts


report:slack-junit-ios-custom:
  rules: *rules_custom
  image: $CI_REGISTRY/tpe/test-scripts
  stage: test_ui
  needs:
    - deploy:review
    - test:ui:app:ios:custom
  script:
    - test_reporter.py
      --path fastlane/test_output/
      --platform ios
      --job-name VPN-iOS-ui-tests
      --slack-channel "$SLACK_CHANNEL"
  allow_failure: true
  tags:
    - shared-small
