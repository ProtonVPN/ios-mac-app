# Templates to be used in other jobs

# Main template for most CI jobs. Runs jobs automatically only when MR is created
# and after the merge to develop branch.
.mr_job_template:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: always
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: always
    - if: $CI_COMMIT_BRANCH == "develop"
      when: always
    - if: $CI_COMMIT_TAG
      when: always
    - when: manual

.ui_full_tests_template:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: never
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: always
    - if: $CI_COMMIT_BRANCH == "develop"
      when: manual
      allow_failure: true # the pipeline continues running even if the manual job is not run
    - if: $CI_COMMIT_TAG
      when: always
    - when: manual

.ui_smoke_tests_template:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: always
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: $CI_COMMIT_BRANCH == "develop"
      when: always
    - if: $CI_COMMIT_TAG
      when: never
    - when: manual

# Template for iOS jobs.
.ios_job_template:
  before_script:
    - ssh-add -D # Delete all ssh private keys
    # Add private key for access to gitlab
    - echo "$CI_SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
    # Save gitlab servers public key
    - if [ -z "$(ssh-keygen -F $CI_SERVER_HOST)" ]; then ssh-keyscan -H $CI_SERVER_HOST >> ~/.ssh/known_hosts; fi
    # Make sure xcode uses system ssh/git settings
    - defaults write com.apple.dt.Xcode IDEPackageSupportUseBuiltinSCM YES
    - !reference [.prepare_secrets, before_script] # Download obfuscated constants
  after_script:
    - ssh-add -D # Delete all ssh private keys
  interruptible: true
  tags:
    - iOS_vpn

# Download obfuscated constants and other very top secret stuff
.prepare_secrets:
  before_script:
    - ./scripts/credentials.sh cleanup
    - ./scripts/credentials.sh setup -s -d -p .secrets-ci-${CI_JOB_ID} -r https://bot:${CI_SECRETS_REPO_KEY}@${CI_SERVER_HOST}/${CI_SECRETS_REPO_PATH}

# Script for deleting all keychain entries that Proton VPN mac app makes.
# Should be done because otherwise CI throws modals asking for login keychain password.
# Usage in before_script, script, after_script: `!reference [.mac_clean_app_keychain, before_script]`
.mac_clean_app_keychain:
  before_script:
    # App saves several items in the keychain. Let's delete them all.
    - for i in `seq 8`; do security delete-generic-password -s "ProtonVPN" || true; done
    - for i in `seq 2`; do security delete-generic-password -s "ProtonVPN-Server-Password" || true; done

# Script for deleting all keychains that may be left from older jobs.
# Sometimes jobs leave orphaned keychains. When such a keychain is present, XCode asks for a password
# when it tries to sign the app. This script deletes all the keychains that may be left by other jobs.
# Usage in before_script, script, after_script: `!reference [.mac_clean_macos_keychain, before_script]`
.mac_clean_macos_keychain:
  before_script:
    # Delete old keychains
    - security list-keychains | grep -E "\/[0-9]{7,8}-db" | xargs security delete-keychain || true

# Template for macOS jobs. These require having proper development certificates and provisioning
# profiles installed.
.mac_job_template:
  extends: .mr_job_template
  tags:
    - macOS_vpn
  before_script:
    - !reference [.mac_clean_app_keychain, before_script]
    - !reference [.mac_clean_macos_keychain, before_script]
    - !reference [.prepare_secrets, before_script] # Download obfuscated constants
    - cd apps/macos/ProtonVPN/ && ../../../scripts/prepare_obfuscated_constants.sh && cd ../../../
    - base64 -D -o Certificates.p12 <<< $DEVELOPER_CERTIFICATE
    - mkdir -pv ~/Library/MobileDevice/Provisioning\ Profiles/
    - base64 -D -o ~/Library/MobileDevice/Provisioning\ Profiles/ProtonVPN_Mac_Development_PP.provisionprofile <<< $DEVELOPMENT_PROFILE
    - base64 -D -o ~/Library/MobileDevice/Provisioning\ Profiles/ProtonVPN_OpenVPN_Development_PP.provisionprofile <<< $DEVELOPMENT_PROFILE_OVPN
    - base64 -D -o ~/Library/MobileDevice/Provisioning\ Profiles/ProtonVPN_WireGuard_Development_PP.provisionprofile <<< $DEVELOPMENT_PROFILE_WG
    - fastlane create_macos_keychain
    - ssh-add -D # Delete all ssh private keys
    # Add private key for access to gitlab
    - echo "$CI_SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
    # Save gitlab servers public key
    - if [ -z "$(ssh-keygen -F $CI_SERVER_HOST)" ]; then ssh-keyscan -H $CI_SERVER_HOST >> ~/.ssh/known_hosts; fi
    # Make sure xcode uses system ssh/git settings
    - defaults write com.apple.dt.Xcode IDEPackageSupportUseBuiltinSCM YES
  after_script:
    - !reference [.mac_clean_app_keychain, before_script]
    - rm -f ~/Library/MobileDevice/Provisioning\ Profiles/ProtonVPN_Mac_Development_PP.provisionprofile
    - rm -f ~/Library/MobileDevice/Provisioning\ Profiles/ProtonVPN_OpenVPN_Development_PP.provisionprofile
    - rm -f ~/Library/MobileDevice/Provisioning\ Profiles/ProtonVPN_WireGuard_Development_PP.provisionprofile
    - fastlane delete_macos_keychain
    - ssh-add -D # Delete all ssh private keys
  interruptible: true

# Include this in artifacts part to take cobertura reports as artifacts
.code_coverage_unit:
  reports:
    coverage_report:
      coverage_format: cobertura
      path: fastlane/test_output/cobertura.xml
    junit:
      - fastlane/test_output/report.junit
